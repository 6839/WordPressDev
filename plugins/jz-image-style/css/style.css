.container-jz {
    display: flex; /* 设置为弹性布局容器，子元素（.box-jz）横向排列 */
    flex-wrap: nowrap; /* 子元素不换行，强制在一行显示 */
    padding: 0 2%; /* 左右内边距为2%，上下内边距为0，使内容与容器边缘留出空间 */
    box-sizing: border-box; /* 盒模型计算包含内边距和边框，避免布局偏移 */
    height: 60vh; /* 容器高度占满视口高度（100%屏幕高度） */
}


.box-jz {
    flex: 1; /* 弹性布局属性：
                - flex-grow: 1（等比扩展剩余空间）
                - flex-shrink: 1（等比收缩超出空间）
                - flex-basis: 0%（初始基准宽度为0，由内容或容器决定）
                最终效果：所有盒子平均分配容器宽度 */
    overflow: hidden; /* 超出盒子的内容（如放大的图片）隐藏，避免布局混乱 */
    transition: 0.5s; /* 所有属性变化添加0.5秒过渡效果，使动画平滑 */
    margin: 0 2%; /* 左右外边距2%，使盒子之间产生间隔 */
    box-shadow: 0 20px 30px rgba(0, 0, 0, 0.1); /* 添加阴影，提升立体感 */
    line-height: 0; /* 文本行高设为0，消除图片与文字间的默认间隙 */
}

.box-jz > img {
    width: 200%; /* 图片初始宽度为盒子宽度的200%，超出盒子范围 */
    height: calc(100% - 10vh); /* 图片高度为盒子高度减去10vh（预留标题空间） */
    -o-object-fit: cover; /* 兼容旧版Opera的图片适配方式 */
    object-fit: cover; /* 图片保持纵横比，裁剪多余部分以填满容器 */
    transition: 0.5s; /* 图片尺寸变化添加0.5秒过渡效果 */
}
/* 初始时图片宽度是盒子的 2 倍（放大状态），仅显示中间部分；悬停时图片宽度缩至 100%（还原正常大小），产生 “图片缩放进入盒子” 的视觉效果 */

.box-jz > span {
    font-size: 2vh; /* 字体大小基于视口高度（vh），随屏幕大小自适应 */
    display: block; /* 行内元素转为块级元素，占据整行空间 */
    text-align: center; /* 文本水平居中 */
    height: 4vh; /* 标题高度，与图片高度计算对应 */
    line-height: 4; /* 行高，控制文本垂直居中（需根据字体大小调整） */
}

.box-jz:hover {
    flex: 1 1 50%; /* 弹性布局属性：
                     - flex-grow: 1（扩展剩余空间）
                     - flex-shrink: 1（收缩超出空间）
                     - flex-basis: 50%（初始基准宽度为50%）
                     悬停时盒子宽度变为容器的50%，其他盒子自动缩小 */
}

.box-jz:hover > img {
    width: 100%; /* 悬停时图片宽度还原为盒子宽度的100%（即正常显示） */
    height: 100%; /* 图片高度填满盒子（包括标题区域，可能覆盖原有计算逻辑） */
}